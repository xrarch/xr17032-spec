
---
title: XR/17032 Processor Specification

date: April 2, 2023

subtitle: Draft 17

classoption: table

header-includes: | 
	\rowcolors{2}{gray!0}{gray!10}
	\usepackage{fancyhdr}
	\pagestyle{fancy}


---

\pagebreak

# SPECIFICATION COPYRIGHT

&nbsp;  

BSD 3-Clause License

Copyright (c) 2023, TomAwezome

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


\pagebreak

# REGISTERS

&nbsp;  


The XR/17032 processor architecture contains 32 GPRs (general-purpose registers), and 16 CRs (control registers).

## Control Registers
For control registers, there are 2 instructions, `MTCR` and `MFCR`, that alter the control registers, and for these 2 instructions the control registers are encoded in 4 bits of the opcode. The `TBLO` and `TBINDEX` control registers specifically are modified by the `TBRD` and `TBFN` instructions.

| Name       | Encoding | Description
| ---------- | -------- | -----------
| RS         | 0000     | Processor Status
| TBLO       | 0010     | TLB Entry
| EPC        | 0011     | Exception Program Counter
| EVEC       | 0100     | Exception Vector
| PGTB       | 0101     | Page Table Base
| TBINDEX    | 0110     | TLB Index
| EBADADDR   | 0111     | Bad Address
| TBVEC      | 1000     | TLB Miss Handler
| FWVEC      | 1001     | Firmware Call Vector
| TBSCRATCH  | 1010     | TLB Miss Scratch
| TBHI       | 1011     | ASID & TLB Miss Address
| K0         | 1100     | 
| K1         | 1101     | 
| K2         | 1110     | 
| K3         | 1111     | 

## General Purpose Registers

General purpose registers are encoded with 5 bits in instruction opcodes using registers.

| Name       | Encoding    | Description
| ---------- | ----------- | ----------
| ZERO       | 00000       | Zero Register: always reads zero, ignores writes.
| T0         | 00001       | 
| T1         | 00010       | 
| T2         | 00011       | 
| T3         | 00100       | 
| T4         | 00101       | 
| T5         | 00110       | 
| A0         | 00111       | 
| A1         | 01000       | 
| A2         | 01001       | 
| A3         | 01010       | 
| S0         | 01011       | 
| S1         | 01100       | 
| S2         | 01101       | 
| S3         | 01110       | 
| S4         | 01111       | 
| S5         | 10000       | 
| S6         | 10001       | 
| S7         | 10010       | 
| S8         | 10011       | 
| S9         | 10100       | 
| S10        | 10101       | 
| S11        | 10110       | 
| S12        | 10111       | 
| S13        | 11000       | 
| S14        | 11001       | 
| S15        | 11010       | 
| S16        | 11011       | 
| S17        | 11100       | 
| S18 / TP   | 11101       | **AISIX:** Scratch register 18. **MINTIA:** Thread Local Storage Pointer
| SP         | 11110       | Stack Pointer
| LR         | 11111       | Link Register



&nbsp;  

\pagebreak

# MEMORY

&nbsp;  


The memory layout of the address space of the XR/17032 architecture are discussed here.
        
TODO:

 - finish writing this section


&nbsp;  

\pagebreak

# OPCODES

&nbsp;  

## Move From Control Register - MFCR Rd, Cs

&nbsp;  

### Encoding

| [31:20] | [19:16] | [15:11] | [10:6] | [5:0] |
| :-: | :-: | :-: | :-: | :-: |
| `111100000000`| `ssss`| `00000`| `ddddd`| `101001`|

### Description


Sets the value of a general purpose register to the value stored in a control register.



&nbsp;  

### Implementation

```

rd = (ir >> 6) & 31;
rb = (ir >> 16) & 15;

if (rd == 0)
    break;

Reg[rd] = ControlReg[rb];



```

\pagebreak

&nbsp;  

## Move To Control Register - MTCR Cs, Ra

&nbsp;  

### Encoding

| [31:20] | [19:16] | [15:11] | [10:0] |
| :-: | :-: | :-: | :-: |
| `111000000000`| `ssss`| `aaaaa`| `00000101001`|

### Description


Sets the value of a control register to the value stored in a general purpose register.



&nbsp;  

### Implementation

```

ra = (ir >> 11) & 31;
rb = (ir >> 16) & 15;

ControlReg[rb] = Reg[ra];


```

\pagebreak

&nbsp;  

## ??? - TBFN

&nbsp;  

### Encoding

| [31:0] |
| :-: |
| `00010000000000000000000000101001`|

### Description


???



&nbsp;  

### Implementation

```

ControlReg[TBINDEX] = 0x80000000;
  
ControlReg[TBINDEX] = 0x80000000;
  
vpn = ControlReg[TBHI] & 0xFFFFF;
  
index = (vpn & ((1 << (TLBSETLOG - 1)) - 1)) | (vpn >> 19 << (TLBSETLOG - 1));
  
for (int i = 0; i < TLBWAYS; i++) {
    if ((TLB[index * TLBWAYS + i] >> 32) == ControlReg[TBHI]) {
        ControlReg[TBINDEX] = index * TLBWAYS + i;
        break;
    }
}


```

\pagebreak

&nbsp;  

## ??? - TBLD ???, ???

&nbsp;  

### Encoding

| [31:16] | [15:11] | [10:6] | [5:0] |
| :-: | :-: | :-: | :-: |
| `0011000000000000`| `aaaaa`| `ddddd`| `101001`|

### Description


???



&nbsp;  

### Implementation

```

rd = (ir >> 6) & 31;
ra = (ir >> 11) & 31;

pde = Reg[ra];
  
if (!(pde & 1)) {
    Reg[rd] = 0;
    break;
}
  
CPUReadLong(((pde >> 5) << 12) | ((ControlReg[TBHI] & 1023) << 2), &Reg[rd]);


```

\pagebreak

&nbsp;  

## ??? - TBRD

&nbsp;  

### Encoding

| [31:0] |
| :-: |
| `00100000000000000000000000101001`|

### Description


???



&nbsp;  

### Implementation

```

tlbe = TLB[ControlReg[TBINDEX] & (TLBSIZE - 1)];
  
ControlReg[TBLO] = tlbe;
ControlReg[TBHI] = tlbe >> 32;


```

\pagebreak

&nbsp;  

